{"version":3,"sources":["components/controls/controls.jsx","components/notepad/notepad.jsx","redux/actions/action-types.js","utils/get-last-edited-time.js","utils/truncate.js","redux/selectors/notes.js","containers/notepad.jsx","redux/actions/notes.js","components/notelist/notelist-empty.jsx","components/notelist/notelist-item.jsx","components/notelist/notelist.jsx","containers/notelist.jsx","app.jsx","redux/reducers/create-reducer.js","redux/reducers/categories.js","redux/reducers/notes.js","redux/reducers/root.js","redux/store.js","index.js"],"names":["Controls","react_default","a","createElement","react","Notepad","handleChange","e","_this$props","_this","props","id","onAddNote","onUpdateNoteContent","content","target","value","activeNoteExists","_this$props2","this","lastEdited","className","onChange","Component","notes","get_last_edited_time","raw","dayjs","dayEdited","format","timeEdited","printed","concat","truncate","length","arguments","undefined","substr","getNotes","state","getNotesList","createSelector","map","note","isActive","title","getActiveNote","find","getActiveId","activeNote","getActiveContent","getActiveLastEdited","connect","dispatch","initalContent","type","actionTypes","uuid","getLastEditedTime","addNote","updateNoteContent","NotelistEmpty","role","aria-label","NotelistItem","_ref","onSetActiveNote","classnames","notelist__list__item--active","onClick","Notelist","hasNotes","notelist_item","Object","assign","notelist_empty","setActiveNote","App","controls_controls","containers_notelist","containers_notepad","create_reducer","initalState","actionsMap","action","reducerFn","categoryFactory","name","createReducer","defineProperty","category","objectSpread","_actionsMap","filter","lastEditedRaw","combineReducers","categories","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","store","app","document","getElementById"],"mappings":"sQAceA,SAXE,kBACbC,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACIH,EAAAC,EAAAC,cAAA,0BAGAF,EAAAC,EAAAC,cAAA,sECwCOE,oNA5BXC,aAAe,SAACC,GAAM,IAAAC,EAC6BC,EAAKC,MAA5CC,EADUH,EACVG,GAAIC,EADMJ,EACNI,UAAWC,EADLL,EACKK,oBACjBC,EAAUP,EAAEQ,OAAOC,MACzB,OAAKP,EAAKQ,iBAGHJ,EAAoBF,EAAIG,GAFpBF,EAAUE,4EAKhB,IAAAI,EAC2BC,KAAKT,MAA7BI,EADHI,EACGJ,QAASM,EADZF,EACYE,WACjB,OACInB,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,WACVD,GACGnB,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,sBACVD,GAGTnB,EAAAC,EAAAC,cAAA,YACIkB,UAAU,mBACVC,SAAUH,KAAKb,aACfU,MAAOF,8CAxBnB,QAASK,KAAKT,MAAMC,UAZNY,+BCLTC,EACA,gBADAA,EAEG,mBAFHA,EAGU,0BAHVA,EAIM,uCCFJC,EAAA,WACX,IAAMC,EAAMC,MACNC,EAAYF,EAAIG,OAAO,gBACvBC,EAAaJ,EAAIG,OAAO,UAC9B,MAAO,CACHH,MACAK,QAAO,GAAAC,OAAKJ,EAAL,QAAAI,OAAqBF,YCNrBG,EAAA,SAACnB,GAAD,IAAUoB,EAAVC,UAAAD,OAAA,QAAAE,IAAAD,UAAA,GAAAA,UAAA,GAAmB,GAAnB,SAAAH,OAA6BlB,EAAQuB,OAAO,EAAGH,IAA/CF,OAAyDlB,EAAQoB,OAASA,EAAS,MAAQ,KCE7FI,EAAW,SAAAC,GAAK,OAAIA,EAAMf,OAE1BgB,EAAeC,YACxBH,EACA,SAAAd,GAAK,OAAIA,EAAMkB,IAAI,SAAAC,GAAI,MAAK,CACxBhC,GAAIgC,EAAKhC,GACTiC,SAAUD,EAAKC,SACfC,MAAOZ,EAASU,EAAK7B,SACrBM,WAAYuB,EAAKvB,gBAIZ0B,EAAgBL,YACzBH,EACA,SAAAd,GAAK,OAAIA,EAAMuB,KAAK,SAAAJ,GAAI,OAAIA,EAAKC,YAAa,OAGrCI,EAAcP,YACvBK,EACA,SAAAG,GAAU,OAAIA,EAAaA,EAAWtC,GAAK,KAGlCuC,EAAmBT,YAC5BK,EACA,SAAAG,GAAU,OAAIA,EAAaA,EAAWnC,QAAU,KAGvCqC,EAAsBV,YAC/BK,EACA,SAAAG,GAAU,OAAIA,EAAaA,EAAW7B,WAAa,KChBxCgC,cAXS,SAACb,GAAD,MAAY,CAChC5B,GAAIqC,EAAYT,GAChBzB,QAASoC,EAAiBX,GAC1BnB,WAAY+B,EAAoBZ,KAGT,SAACc,GAAD,MAAe,CACtCzC,UAAW,SAAC0C,GAAD,OAAmBD,ECRX,eAACC,EAADnB,UAAAD,OAAA,QAAAE,IAAAD,UAAA,GAAAA,UAAA,GAAiB,GAAjB,MAAyB,CAC5CoB,KAAMC,EAEN7C,GAAI8C,MACJH,gBACAlC,WAAYsC,KDG2BC,CAAQL,KAC/CzC,oBAAqB,SAACF,EAAIG,GAAL,OAAiBuC,ECIT,SAAC1C,EAAIG,GAAL,MAAkB,CAC/CyC,KAAMC,EACN7C,KACAG,UACAM,WAAYsC,KDRmCE,CAAkBjD,EAAIG,OAG1DsC,CAGb/C,GEZawD,EANO,kBAClB5D,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,mBACXpB,EAAAC,EAAAC,cAAA,QAAM2D,KAAK,MAAMC,aAAW,iBAA5B,kCADJ,qCC0BWC,EAxBM,SAAAC,GAAA,IAAGrB,EAAHqB,EAAGrB,SAAUC,EAAboB,EAAapB,MAAOzB,EAApB6C,EAAoB7C,WAAY8C,EAAhCD,EAAgCC,gBAAhC,OACjBjE,EAAAC,EAAAC,cAAA,MACIkB,UAAW8C,IAAW,uBAAwB,CAC1CC,+BAAgCxB,IAEpCyB,QAASH,EACTJ,KAAK,UAEL7D,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,+BACVwB,GAEL5C,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,qCACVD,KC6BEkD,0LAtBF,IAAA9D,EAC8BW,KAAKT,MAAhCc,EADHhB,EACGgB,MAAO0C,EADV1D,EACU0D,gBACf,OACIjE,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,YACTF,KAAKoD,SAGCtE,EAAAC,EAAAC,cAAA,MAAIkB,UAAU,kBACTF,KAAKoD,UAAY/C,EAAMkB,IAAI,SAAAC,GAAI,OAC5B1C,EAAAC,EAAAC,cAACqE,EAADC,OAAAC,OAAA,GACQ/B,EADR,CAEIuB,gBAAiBA,EAAgBvB,EAAKhC,GAAIgC,EAAKC,gBAN5D3C,EAAAC,EAAAC,cAACwE,EAAD,wCAVJ,IACHnD,EAAUL,KAAKT,MAAfc,MACR,OAAOA,GAASA,EAAMU,OAAS,SAdhBX,cCOR6B,cARS,SAACb,GAAD,MAAY,CAChCf,MAAOgB,EAAaD,KAGG,SAACc,GAAD,MAAe,CACtCa,gBAAiB,SAACvD,EAAIiC,GAAL,OAAkB,kBAAOA,GAAYS,EJc7B,SAAC1C,GAAD,MAAS,CAClC4C,KAAMC,EACN7C,MIhB+DiE,CAAcjE,QAGlEyC,CAGbkB,GCCaO,EAZH,kBACR5E,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACIH,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,kBACXpB,EAAAC,EAAAC,cAAC2E,EAAD,OAEJ7E,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,cACXpB,EAAAC,EAAAC,cAAC4E,EAAD,MACA9E,EAAAC,EAAAC,cAAC6E,EAAD,8BCZGC,EAAA,SAACC,EAAaC,GAAd,OAA6B,WAAiC,IAAhC5C,EAAgCJ,UAAAD,OAAA,QAAAE,IAAAD,UAAA,GAAAA,UAAA,GAAxB+C,EAAaE,EAAWjD,UAAAD,OAAA,EAAAC,UAAA,QAAAC,EACnEiD,EAAYF,EAAWC,EAAO7B,MACpC,OAAI8B,EACOA,EAAU9C,EAAO6C,GAErB7C,ICFL+C,EAAkB,eAACC,EAADpD,UAAAD,OAAA,QAAAE,IAAAD,UAAA,GAAAA,UAAA,GAAQ,eAAR,MAA4B,CAChDxB,GAAI8C,MACJ8B,OACA/D,MAAO,KAgBIgE,IAbK,CAChBF,EAAgB,YAChBA,EAAgB,QAChBA,EAAgB,UAGJb,OAAAgB,EAAA,EAAAhB,CAAA,GZRQ,gCYSc,SAAClC,EAAO6C,GAAR,OAAmB7C,EAAMG,IAAI,SAAAgD,GAAQ,OAAIA,EAAS/E,KAAOyE,EAAOzE,GAC5F+E,EADqEjB,OAAAkB,EAAA,EAAAlB,CAAA,GAE/DiB,EAF+D,CAErDH,KAAMH,EAAOG,YCaxBC,IA3BK,IAEJI,EAAA,GAAAnB,OAAAgB,EAAA,EAAAhB,CAAAmB,EACXpC,EAAsB,SAACjB,EAAO6C,GAAR,OAAmB7C,EACrCG,IAAI,SAAAC,GAAI,OAAA8B,OAAAkB,EAAA,EAAAlB,CAAA,GAAU9B,EAAV,CAAgBC,UAAU,MAClCZ,OAAO,CAAC,CACLrB,GAAIyE,EAAOzE,GACXG,QAASsE,EAAO9B,eAAiB,GACjClC,WAAY,KACZwB,UAAU,OAPN6B,OAAAgB,EAAA,EAAAhB,CAAAmB,EASXpC,EAAyB,SAACjB,EAAO6C,GAAR,OAAmB7C,EAAMsD,OAAO,SAAAlD,GAAI,OAAIA,EAAKhC,KAAOyE,EAAOzE,OATzE8D,OAAAgB,EAAA,EAAAhB,CAAAmB,EAUXpC,EAAgC,SAACjB,EAAO6C,GAAR,OAAmB7C,EAAMG,IAAI,SAAAC,GAAI,OAAIA,EAAKhC,KAAOyE,EAAOzE,GACnFgC,EADgE8B,OAAAkB,EAAA,EAAAlB,CAAA,GAG3D9B,EAH2D,CAI9D7B,QAASsE,EAAOtE,QAChBM,WAAYgE,EAAOhE,WAAWW,QAC9B+D,cAAeV,EAAOhE,WAAWM,UAhB7B+C,OAAAgB,EAAA,EAAAhB,CAAAmB,EAmBXpC,EAA4B,SAACjB,EAAO6C,GAAR,OAAmB7C,EAAMG,IAAI,SAAAC,GAAI,OAAA8B,OAAAkB,EAAA,EAAAlB,CAAA,GACvD9B,EADuD,CAE1DC,SAAUD,EAAKhC,KAAOyE,EAAOzE,SArBrBiF,ICFDG,cAAgB,CAC3BC,aACAxE,UCJWyE,cACXC,EACAC,OAAOC,8BAAgCD,OAAOC,sCCGlDC,IAASC,OACLrG,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAUC,MAAOA,GACbvG,EAAAC,EAAAC,cAACsG,EAAD,OAEJC,SAASC,eAAe","file":"static/js/main.b6b936f6.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport './controls.css';\n\nconst Controls = () => (\n    <Fragment>\n        <button>\n            Add Note\n        </button>\n        <button>\n            Delete Note\n        </button>\n    </Fragment>\n);\n\nexport default Controls;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './notepad.css';\n\n\nclass Notepad extends Component {\n\n    static propTypes = {\n        id: PropTypes.string,\n        content: PropTypes.string,\n        lastEdited: PropTypes.string,\n        onAddNote: PropTypes.func.isRequired,\n        onUpdateNoteContent: PropTypes.func.isRequired,\n    };\n\n\n    get activeNoteExists() {\n        return !!this.props.id;\n    }\n\n    handleChange = (e) => {\n        const { id, onAddNote, onUpdateNoteContent } = this.props;\n        const content = e.target.value;\n        if (!this.activeNoteExists) {\n            return onAddNote(content);\n        }\n        return onUpdateNoteContent(id, content);\n    }\n\n    render() {\n        const { content, lastEdited } = this.props;\n        return (\n            <div className=\"notepad\">\n                {lastEdited && (\n                    <div className=\"notepad__last-edit\">\n                        {lastEdited}\n                    </div>\n                )}\n                <textarea\n                    className=\"notepad__content\"\n                    onChange={this.handleChange}\n                    value={content}\n                />\n            </div>\n        );\n    }\n};\n\nexport default Notepad;\n","export const notes = {\n    addNote: 'notes/addNote',\n    deleteNote: 'notes/deleteNote',\n    updateNoteContent: 'notes/updateNoteContent',\n    setActiveNote: 'notes/setActiveNote',\n};\n\nexport const categories = {\n    updateCategoryName: 'categories/updateCategoryName',\n};\n","import dayjs from 'dayjs';\n\nexport default () => {\n    const raw = dayjs();\n    const dayEdited = raw.format('MMMM D, YYYY');\n    const timeEdited = raw.format('h:mm A');\n    return {\n        raw,\n        printed: `${dayEdited} at ${timeEdited}`,\n    };\n};\n","//  For truncating note content to be displayed in the notelist\n\nexport default (content, length = 50) => `${content.substr(0, length)}${content.length > length ? '...' : ''}`;\n","import { createSelector } from 'reselect';\nimport truncate from '../../utils/truncate.js';\n\n\nexport const getNotes = state => state.notes;\n\nexport const getNotesList = createSelector(\n    getNotes,\n    notes => notes.map(note => ({\n        id: note.id,\n        isActive: note.isActive,\n        title: truncate(note.content),\n        lastEdited: note.lastEdited,\n    }))\n);\n\nexport const getActiveNote = createSelector(\n    getNotes,\n    notes => notes.find(note => note.isActive) || null,\n);\n\nexport const getActiveId = createSelector(\n    getActiveNote,\n    activeNote => activeNote ? activeNote.id : '',\n);\n\nexport const getActiveContent = createSelector(\n    getActiveNote,\n    activeNote => activeNote ? activeNote.content : '',\n);\n\nexport const getActiveLastEdited = createSelector(\n    getActiveNote,\n    activeNote => activeNote ? activeNote.lastEdited : '',\n);\n\n// export const getNoteById = createSelector(\n//     getNotes,\n//     // id => id, // To pass the given ID through\n//     (notes, id) => notes.find(note => note.id === id) || null,\n// );\n\n// export const getNoteTitle = createSelector(\n//     getNoteById,\n//     note => truncate(note.content),\n// );\n","import { connect } from 'react-redux';\nimport Notepad from '../components/notepad/notepad.jsx';\nimport { addNote, updateNoteContent } from '../redux/actions/notes.js';\nimport { getActiveId, getActiveContent, getActiveLastEdited } from '../redux/selectors/notes.js';\n\n\nconst mapStateToProps = (state) => ({\n    id: getActiveId(state),\n    content: getActiveContent(state),\n    lastEdited: getActiveLastEdited(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    onAddNote: (initalContent) => dispatch(addNote(initalContent)),\n    onUpdateNoteContent: (id, content) => dispatch(updateNoteContent(id, content)),\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Notepad);\n","import uuid from 'uuid';\nimport { notes as actionTypes } from './action-types.js';\nimport getLastEditedTime from '../../utils/get-last-edited-time.js';\n\n\nexport const addNote = (initalContent = '') => ({\n    type: actionTypes.addNote,\n    //  Generate uuid here in the action creator\n    id: uuid(),\n    initalContent,\n    lastEdited: getLastEditedTime(),\n});\n\nexport const deleteNote = (id) => ({\n    type: actionTypes.addNote,\n    id,\n});\n\nexport const updateNoteContent = (id, content) => ({\n    type: actionTypes.updateNoteContent,\n    id,\n    content,\n    lastEdited: getLastEditedTime(),\n});\n\nexport const setActiveNote = (id) => ({\n    type: actionTypes.setActiveNote,\n    id\n});\n","import React from 'react'\n\nconst NotelistEmpty = () => (\n    <div className=\"notelist__empty\">\n        <span role=\"img\" aria-label=\"no-good-emoji\">🙅‍♀️</span> No notes here!\n    </div>\n);\n\nexport default NotelistEmpty\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\n\nconst NotelistItem = ({ isActive, title, lastEdited, onSetActiveNote }) => (\n    <li\n        className={classnames('notelist__list__item', {\n            'notelist__list__item--active': isActive,\n        })}\n        onClick={onSetActiveNote}\n        role=\"button\"\n    >\n        <div className=\"notelist__list__item__title\">\n            {title}\n        </div>\n        <div className=\"notelist__list__item__last-edited\">\n            {lastEdited}\n        </div>\n    </li>\n);\n\nNotelistItem.propTypes = {\n    isActive: PropTypes.bool.isRequired,\n    title: PropTypes.string.isRequired,\n    lastEdited: PropTypes.string.isRequired,\n    onSetActiveNote: PropTypes.func.isRequired,\n};\n\nexport default NotelistItem;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport NotelistEmpty from './notelist-empty.jsx';\nimport NotelistItem from './notelist-item.jsx';\nimport './notelist.css';\n\n\nclass Notelist extends Component {\n\n    static propTypes = {\n        notes: PropTypes.arrayOf(PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            isActive: PropTypes.string.isRequired,\n            title: PropTypes.string.isRequired,\n            lastEdited: PropTypes.string.isRequired,\n        })),\n        onSetActiveNote: PropTypes.func.isRequired,\n    };\n\n    get hasNotes() {\n        const { notes } = this.props;\n        return notes && notes.length > 0;\n    }\n\n    render() {\n        const { notes, onSetActiveNote } = this.props;\n        return (\n            <div className=\"notelist\">\n                {!this.hasNotes\n                    ? (<NotelistEmpty />)\n                    : (\n                        <ul className=\"notelist__list\">\n                            {this.hasNotes && notes.map(note => (\n                                <NotelistItem\n                                    {...note}\n                                    onSetActiveNote={onSetActiveNote(note.id, note.isActive)}\n                                />\n                            ))}\n                        </ul>\n                    )\n                }\n            </div>\n        )\n    }\n}\n\nexport default Notelist;\n","import { connect } from 'react-redux';\nimport Notelist from '../components/notelist/notelist.jsx';\nimport { setActiveNote } from '../redux/actions/notes.js';\nimport { getNotesList } from '../redux/selectors/notes.js';\n\n\nconst mapStateToProps = (state) => ({\n    notes: getNotesList(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    onSetActiveNote: (id, isActive) => () => !isActive && dispatch(setActiveNote(id)),\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Notelist);\n","import React, { Fragment } from 'react';\nimport Controls from './components/controls/controls.jsx';\nimport Notepad from './containers/notepad.jsx';\nimport Notelist from './containers/notelist.jsx';\n\n\nconst App = () => (\n    <Fragment>\n        <div className=\"main__controls\">\n            <Controls />\n        </div>\n        <div className=\"main__body\">\n            <Notelist />\n            <Notepad />\n        </div>\n    </Fragment>\n);\n\nexport default App;\n","//  Util for creating a reducer using the actionsMap pattern\nexport default (initalState, actionsMap) => (state = initalState, action) => {\n    const reducerFn = actionsMap[action.type];\n    if (reducerFn) {\n        return reducerFn(state, action);\n    }\n    return state;\n};\n","import uuid from 'uuid';\nimport { categories as actionTypes } from '../actions/action-types.js';\nimport createReducer from './create-reducer.js';\n\nconst categoryFactory = (name = 'New category') => ({\n    id: uuid(),\n    name,\n    notes: [],\n});\n\nconst initalState = [\n    categoryFactory('Personal'),\n    categoryFactory('Work'),\n    categoryFactory('Other'),\n];\n\nconst actionsMap = {\n    [actionTypes.updateCategoryName]: (state, action) => state.map(category => category.id !== action.id\n        ? category\n        : ({ ...category, name: action.name })\n    )\n};\n\nexport default createReducer(initalState, actionsMap);\n","import { notes as actionTypes } from '../actions/action-types.js';\nimport createReducer from './create-reducer.js';\n\n\n\nconst initalState = [];\n\nconst actionsMap = {\n    [actionTypes.addNote]: (state, action) => state\n        .map(note => ({ ...note, isActive: false })) // turn off the current active note\n        .concat([{\n            id: action.id,\n            content: action.initalContent || '',\n            lastEdited: null,\n            isActive: true,\n        }]),\n    [actionTypes.deleteNote]: (state, action) => state.filter(note => note.id !== action.id),\n    [actionTypes.updateNoteContent]: (state, action) => state.map(note => note.id !== action.id\n        ? note\n        : ({\n            ...note,\n            content: action.content,\n            lastEdited: action.lastEdited.printed,\n            lastEditedRaw: action.lastEdited.raw,\n        })\n    ),\n    [actionTypes.setActiveNote]: (state, action) => state.map(note => ({\n        ...note,\n        isActive: note.id === action.id,\n    }))\n};\n\nexport default createReducer(initalState, actionsMap);\n","import { combineReducers } from 'redux';\nimport categories from './categories.js';\nimport notes from './notes.js';\n\n\nexport default combineReducers({\n    categories,\n    notes,\n});\n","import { createStore } from 'redux';\nimport rootReducer from './reducers/root.js';\n\nexport default createStore(\n    rootReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './app.jsx';\nimport store from './redux/store.js';\nimport './index.css';\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('main')\n);\n"],"sourceRoot":""}